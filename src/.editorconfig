root = true

## Global ##
[*]
charset = utf-8
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true


## Indentation and Spacing ##
[*]
indent_size = 4
indent_style = space
tab_width = 4

[*.cs]
indent_size = 4
indent_style = space
tab_width = 4

[*.{csproj,xml}]
indent_size = 2
indent_style = space
tab_width = 2


## CSharp ##
[*.cs]

# Code Style | General | 'this.' preferences
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# Code Style | General | Predefined type preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Code Style | General | 'var' preferences
csharp_style_var_elsewhere = true:suggestion
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion

# Code Style | General | Code block preferences
csharp_prefer_braces = true:warning
csharp_style_namespace_declarations = file_scoped:suggestion
csharp_prefer_simple_using_statement = true:suggestion
dotnet_style_prefer_auto_properties = true:silent

# Code Style | General | Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning

# Code Style | General | Expression preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:warning
csharp_style_prefer_switch_expression = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = false:silent
dotnet_style_explicit_tuple_names = true:suggestion
csharp_prefer_simple_default_expression = true:warning
dotnet_style_prefer_inferred_tuple_names = false:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = false:suggestion
csharp_style_pattern_local_over_anonymous_function = true:warning
dotnet_style_prefer_compound_assignment = true:warning
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion

# Code Style | General | Expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion

# Code Style | General | Pattern matching preferences
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_prefer_not_pattern = true:suggestion

# Code Style | General | Variable preferences
csharp_style_inlined_variable_declaration = true:warning
csharp_style_deconstructed_variable_declaration = true:suggestion

# Code Style | General | 'null' checking
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
csharp_style_prefer_null_check_over_type_check = true:suggestion

# Code Style | General | 'using' preferences
csharp_using_directive_placement = outside_namespace:error

# Code Style | General | Modifier preferences
dotnet_style_readonly_field = true:warning
csharp_prefer_static_local_function = true:warning

# Code Style | General | Parameter preferences
dotnet_code_quality_unused_parameters = non_public:warning

# Code Style | General | New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:warning
csharp_style_allow_embedded_statements_on_same_line_experimental = false:warning
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:warning
dotnet_style_allow_statement_immediately_after_block_experimental = false:warning
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false:warning

# Code Style | Formatting | General

# Code Style | Formatting | Indentation | General
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_switch_labels = true

# Code Style | Formatting | Indentation | Label Indentation
csharp_indent_labels = one_less_than_current

# Code Style | Formatting | New Lines | New line options for braces
csharp_new_line_before_open_brace = all

# Code Style | Formatting | New Lines | New line options for keywords
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true

# Code Style | Formatting | New Lines | New line options for expressions
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Code Style | Formatting | Spacing | Set spacing for method declarations
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false

# Code Style | Formatting | Spacing | Set spacing for method calls
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Code Style | Formatting | Spacing | Set other spacing options
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_after_cast = false
csharp_space_around_declaration_statements = false

# Code Style | Formatting | Spacing | Set spacing for brackets
csharp_space_before_open_square_brackets = false
csharp_space_between_square_brackets = false
csharp_space_between_empty_square_brackets = false

# Code Style | Formatting | Spacing | Set spacing for delimiters
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_after_comma = true
csharp_space_before_dot = false
csharp_space_after_dot = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_after_semicolon_in_for_statement = true

# Code Style | Formatting | Spacing | Set spacing for operators
csharp_space_around_binary_operators = before_and_after

# Code Style | Formatting | Wrapping
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

# Advanced | Using directives
dotnet_sort_system_directives_first = false
dotnet_separate_import_directive_groups = false

# Code Style | Naming | Rules | Interface should begin with I
dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

# Code Style | Naming | Rules | Generic Parameter should begin with T
dotnet_naming_rule.generic_parameter_should_be_begins_with_t.severity = warning
dotnet_naming_rule.generic_parameter_should_be_begins_with_t.symbols = generic_parameter
dotnet_naming_rule.generic_parameter_should_be_begins_with_t.style = begins_with_t

# Code Style | Naming | Rules | Private Field should begin with Underscore
#dotnet_naming_rule.field_private_should_be_begins_with_underscore.severity = warning
#dotnet_naming_rule.field_private_should_be_begins_with_underscore.symbols = field_private
#dotnet_naming_rule.field_private_should_be_begins_with_underscore.style = begins_with_underscore

# Code Style | Naming | Rules | Async Method should end in Async
dotnet_naming_rule.method_async_should_be_ends_with_async.severity = warning
dotnet_naming_rule.method_async_should_be_ends_with_async.symbols = method_async
dotnet_naming_rule.method_async_should_be_ends_with_async.style = ends_with_async

# Code Style | Naming | Rules | Async Local Function should end in Async
dotnet_naming_rule.local_function_async_should_be_ends_with_async.severity = warning
dotnet_naming_rule.local_function_async_should_be_ends_with_async.symbols = local_function_async
dotnet_naming_rule.local_function_async_should_be_ends_with_async.style = ends_with_async

# Code Style | Naming | Rules | Class should be PascalCase
dotnet_naming_rule.class_should_be_pascal_case.severity = warning
dotnet_naming_rule.class_should_be_pascal_case.symbols = class
dotnet_naming_rule.class_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Struct should be PascalCase
dotnet_naming_rule.struct_should_be_pascal_case.severity = warning
dotnet_naming_rule.struct_should_be_pascal_case.symbols = struct
dotnet_naming_rule.struct_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Enum should be PascalCase
dotnet_naming_rule.enum_should_be_pascal_case.severity = warning
dotnet_naming_rule.enum_should_be_pascal_case.symbols = enum
dotnet_naming_rule.enum_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Type should be PascalCase
dotnet_naming_rule.type_should_be_pascal_case.severity = warning
dotnet_naming_rule.type_should_be_pascal_case.symbols = type
dotnet_naming_rule.type_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Method should be PascalCase
dotnet_naming_rule.method_should_be_pascal_case.severity = warning
dotnet_naming_rule.method_should_be_pascal_case.symbols = method
dotnet_naming_rule.method_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Local Function should be PascalCase
dotnet_naming_rule.local_function_should_be_pascal_case.severity = warning
dotnet_naming_rule.local_function_should_be_pascal_case.symbols = local_function
dotnet_naming_rule.local_function_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Property should be PascalCase
dotnet_naming_rule.property_should_be_pascal_case.severity = warning
dotnet_naming_rule.property_should_be_pascal_case.symbols = property
dotnet_naming_rule.property_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Event should be PascalCase
dotnet_naming_rule.event_should_be_pascal_case.severity = warning
dotnet_naming_rule.event_should_be_pascal_case.symbols = event
dotnet_naming_rule.event_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Delegate should be PascalCase
dotnet_naming_rule.delegate_should_be_pascal_case.severity = warning
dotnet_naming_rule.delegate_should_be_pascal_case.symbols = delegate
dotnet_naming_rule.delegate_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Const field should be PascalCase
dotnet_naming_rule.const_field_should_be_pascal_case.severity = warning
dotnet_naming_rule.const_field_should_be_pascal_case.symbols = const_field
dotnet_naming_rule.const_field_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Const local should be PascalCase
dotnet_naming_rule.const_local_should_be_pascal_case.severity = warning
dotnet_naming_rule.const_local_should_be_pascal_case.symbols = const_local
dotnet_naming_rule.const_local_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Const should be PascalCase
dotnet_naming_rule.const_should_be_pascal_case.severity = warning
dotnet_naming_rule.const_should_be_pascal_case.symbols = const
dotnet_naming_rule.const_should_be_pascal_case.style = pascal_case

# Code Style | Naming | Rules | Field should be camelCase
dotnet_naming_rule.field_should_be_camel_case.severity = warning
dotnet_naming_rule.field_should_be_camel_case.symbols = field
dotnet_naming_rule.field_should_be_camel_case.style = camel_case

# Code Style | Naming | Rules | Parameter should be camelCase
dotnet_naming_rule.parameter_should_be_camel_case.severity = warning
dotnet_naming_rule.parameter_should_be_camel_case.symbols = parameter
dotnet_naming_rule.parameter_should_be_camel_case.style = camel_case

# Code Style | Naming | Rules | Variable should be camelCase
dotnet_naming_rule.variable_should_be_camel_case.severity = warning
dotnet_naming_rule.variable_should_be_camel_case.symbols = variable
dotnet_naming_rule.variable_should_be_camel_case.style = camel_case

# Code Style | Naming | Specifications | Interface
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

# Code Style | Naming | Specifications | Class
dotnet_naming_symbols.class.applicable_kinds = class
dotnet_naming_symbols.class.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.class.required_modifiers = 

# Code Style | Naming | Specifications | Struct
dotnet_naming_symbols.struct.applicable_kinds = struct
dotnet_naming_symbols.struct.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.struct.required_modifiers = 

# Code Style | Naming | Specifications | Enum
dotnet_naming_symbols.enum.applicable_kinds = enum
dotnet_naming_symbols.enum.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enum.required_modifiers = 

# Code Style | Naming | Specifications | Type (Interface, Class, Struct, Enum)
dotnet_naming_symbols.type.applicable_kinds = interface, class, struct, enum
dotnet_naming_symbols.type.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.type.required_modifiers = 

# Code Style | Naming | Specifications | Method
dotnet_naming_symbols.method.applicable_kinds = method
dotnet_naming_symbols.method.applicable_accessibilities = *
dotnet_naming_symbols.method.required_modifiers = 

# Code Style | Naming | Specifications | Method | Async
dotnet_naming_symbols.method_async.applicable_kinds = method
dotnet_naming_symbols.method_async.applicable_accessibilities = *
dotnet_naming_symbols.method_async.required_modifiers = async

# Code Style | Naming | Specifications | Local Function
dotnet_naming_symbols.local_function.applicable_kinds = local_function
dotnet_naming_symbols.local_function.applicable_accessibilities = local
dotnet_naming_symbols.local_function.required_modifiers = 

# Code Style | Naming | Specifications | Local Function | Async
dotnet_naming_symbols.local_function_async.applicable_kinds = local_function
dotnet_naming_symbols.local_function_async.applicable_accessibilities = local
dotnet_naming_symbols.local_function_async.required_modifiers = async

# Code Style | Naming | Specifications | Property
dotnet_naming_symbols.property.applicable_kinds = property
dotnet_naming_symbols.property.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.property.required_modifiers = 

# Code Style | Naming | Specifications | Event
dotnet_naming_symbols.event.applicable_kinds = event
dotnet_naming_symbols.event.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.event.required_modifiers = 

# Code Style | Naming | Specifications | Delegate
dotnet_naming_symbols.delegate.applicable_kinds = delegate
dotnet_naming_symbols.delegate.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.delegate.required_modifiers = 

# Code Style | Naming | Specifications | Field
dotnet_naming_symbols.field.applicable_kinds = field
dotnet_naming_symbols.field.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.field.required_modifiers = 

# Code Style | Naming | Specifications | Field | Private
dotnet_naming_symbols.field_private.applicable_kinds = field
dotnet_naming_symbols.field_private.applicable_accessibilities = private, private_protected
dotnet_naming_symbols.field_private.required_modifiers = 

# Code Style | Naming | Specifications | Parameter
dotnet_naming_symbols.parameter.applicable_kinds = parameter
dotnet_naming_symbols.parameter.applicable_accessibilities = *
dotnet_naming_symbols.parameter.required_modifiers = 

# Code Style | Naming | Specifications | Variable
dotnet_naming_symbols.variable.applicable_kinds = local
dotnet_naming_symbols.variable.applicable_accessibilities = local
dotnet_naming_symbols.variable.required_modifiers = 

# Code Style | Naming | Specifications | Const
dotnet_naming_symbols.const.applicable_kinds = *
dotnet_naming_symbols.const.applicable_accessibilities = *
dotnet_naming_symbols.const.required_modifiers = const

# Code Style | Naming | Specifications | Const | Field
dotnet_naming_symbols.const_field.applicable_kinds = field
dotnet_naming_symbols.const_field.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.const_field.required_modifiers = const

# Code Style | Naming | Specifications | Const | Local
dotnet_naming_symbols.const_local.applicable_kinds = local
dotnet_naming_symbols.const_local.applicable_accessibilities = local
dotnet_naming_symbols.const_local.required_modifiers = const

# Code Style | Naming | Specifications | Generic Parameter
dotnet_naming_symbols.generic_parameter.applicable_kinds = type_parameter
dotnet_naming_symbols.generic_parameter.applicable_accessibilities = *
dotnet_naming_symbols.generic_parameter.required_modifiers = 

# Code Style | Naming | Styles | Pascal Case
dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

# Code Style | Naming | Styles | Camel Case
dotnet_naming_style.camel_case.required_prefix = 
dotnet_naming_style.camel_case.required_suffix = 
dotnet_naming_style.camel_case.word_separator = 
dotnet_naming_style.camel_case.capitalization = camel_case

# Code Style | Naming | Styles | Begins with I
dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

# Code Style | Naming | Styles | Begins with T
dotnet_naming_style.begins_with_t.required_prefix = T
dotnet_naming_style.begins_with_t.required_suffix = 
dotnet_naming_style.begins_with_t.word_separator = 
dotnet_naming_style.begins_with_t.capitalization = pascal_case

# Code Style | Naming | Styles | Begins with Underscore
dotnet_naming_style.begins_with_underscore.required_prefix = _
dotnet_naming_style.begins_with_underscore.required_suffix = 
dotnet_naming_style.begins_with_underscore.word_separator = 
dotnet_naming_style.begins_with_underscore.capitalization = camel_case

# Code Style | Naming | Styles | Ends with Async
dotnet_naming_style.ends_with_async.required_prefix = 
dotnet_naming_style.ends_with_async.required_suffix = Async
dotnet_naming_style.ends_with_async.word_separator = 
dotnet_naming_style.ends_with_async.capitalization = pascal_case

## Microsoft.CodeAnalysis.NetAnalyzers | Design

# CA1000: Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = suggestion

# CA1001: Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = suggestion

# CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = suggestion

# CA1003: Use generic event handler instances
dotnet_diagnostic.CA1003.severity = none

# CA1005: Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = warning

# CA1008: Enums should have zero value
dotnet_diagnostic.CA1008.severity = suggestion

# CA1010: Generic interface should also be implemented
dotnet_diagnostic.CA1010.severity = suggestion

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1014: Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1014.severity = none

# CA1016: Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = none

# CA1017: Mark assemblies with ComVisible
dotnet_diagnostic.CA1017.severity = none

# CA1018: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = warning

# CA1019: Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = suggestion

# CA1021: Avoid out parameters
dotnet_diagnostic.CA1021.severity = suggestion

# CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = suggestion

# CA1027: Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = suggestion

# CA1028: Enum Storage should be Int32
dotnet_diagnostic.CA1028.severity = warning

# CA1030: Use events where appropriate
dotnet_diagnostic.CA1030.severity = none

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = suggestion

# CA1032: Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = suggestion

# CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = warning

# CA1034: Nested types should not be visible
dotnet_diagnostic.CA1034.severity = warning

# CA1036: Override methods on comparable types
dotnet_diagnostic.CA1036.severity = suggestion

# CA1040: Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = none

# CA1041: Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = warning

# CA1043: Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1043.severity = suggestion

# CA1044: Properties should not be write only
dotnet_diagnostic.CA1044.severity = none

# CA1045: Do not pass types by reference
dotnet_diagnostic.CA1045.severity = suggestion

# CA1046: Do not overload equality operator on reference types
dotnet_diagnostic.CA1046.severity = warning

# CA1047: Do not declare protected member in sealed type
dotnet_diagnostic.CA1047.severity = none

# CA1050: Declare types in namespaces
dotnet_diagnostic.CA1050.severity = warning

# CA1051: Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = warning

# CA1052: Static holder types should be Static
dotnet_diagnostic.CA1052.severity = suggestion

# CA1054: URI-like parameters should not be strings
dotnet_diagnostic.CA1054.severity = warning

# CA1055: URI-like return values should not be strings
dotnet_diagnostic.CA1055.severity = warning

# CA1056: URI-like properties should not be strings
dotnet_diagnostic.CA1056.severity = warning

# CA1058: Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = warning

# CA1060: Move P/Invokes to native methods class
dotnet_diagnostic.CA1060.severity = none

# CA1061: Do not hide base class methods
dotnet_diagnostic.CA1061.severity = warning

# CA1062: Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = none

# CA1063: Implement IDisposable Correctly
dotnet_diagnostic.CA1063.severity = suggestion

# CA1064: Exceptions should be public
dotnet_diagnostic.CA1064.severity = warning

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning

# CA1066: Implement IEquatable when overriding Object.Equals
dotnet_diagnostic.CA1066.severity = suggestion

# CA1067: Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1067.severity = suggestion

# CA1068: CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = warning

# CA1069: Enums values should not be duplicated
dotnet_diagnostic.CA1069.severity = warning

# CA1070: Do not declare event fields as virtual
dotnet_diagnostic.CA1070.severity = suggestion

## Microsoft.CodeAnalysis.NetAnalyzers | Documentation

# CA1200: Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = none

## Microsoft.CodeAnalysis.NetAnalyzers | Globalization

# CA1303: Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = warning

# CA1304: Specify CultureInfo
dotnet_diagnostic.CA1304.severity = warning

# CA1305: Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = warning

# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = warning

# CA1308: Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = suggestion

# CA1309: Use ordinal string comparison
dotnet_diagnostic.CA1309.severity = warning

# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = warning

# CA2101: Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = suggestion
